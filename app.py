# app.py
from pathlib import Path
import streamlit as st
import pandas as pd
import plotly.express as px

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="An√°lise de Portf√≥lio de Investidores Brasileiros",
    page_icon="üáßüá∑",
    layout="wide"
)

# --- FUN√á√ÉO DE CARREGAMENTO DE DADOS (COM CACHE) ---
@st.cache_data
def carregar_dados_agregados():
    """Carrega os arquivos de resumo pr√©-calculados de forma robusta."""
    try:
        # Pega o caminho do diret√≥rio onde o script app.py est√°
        diretorio_script = Path(__file__).parent
        
        # Constr√≥i o caminho para a pasta app_data
        caminho_app_data = diretorio_script / "app_data"

        # Carrega os arquivos usando o caminho completo e seguro
        df_filtros = pd.read_csv(caminho_app_data / "dados_agregados_filtros.csv")
        df_mapa = pd.read_csv(caminho_app_data / "dados_mapa_uf.csv")
        df_dist = pd.read_csv(caminho_app_data / "distribuicao_diversificacao.csv")
        df_temporal = pd.read_csv(caminho_app_data / "evolucao_temporal_regional.csv")
        df_temporal['anomes'] = pd.to_datetime(df_temporal['anomes'])
        return df_filtros, df_mapa, df_dist, df_temporal
    except FileNotFoundError:
        st.error(
            "ERRO: Arquivos de dados agregados n√£o encontrados. "
            "Certifique-se de que a pasta 'app_data' e seus arquivos CSV est√£o no reposit√≥rio."
        )
        return None, None, None, None

# --- CARREGANDO OS DADOS ---
df_filtros, df_mapa, df_dist, df_temporal = carregar_dados_agregados()

# --- T√çTULO E INTRODU√á√ÉO ---
st.title("Decis√µes Sob Risco: Uma An√°lise Interativa do Investidor Brasileiro")
st.markdown("An√°lise baseada na disserta√ß√£o de Vin√≠cios Silveira (Fucape, 2025).")
st.warning(
    "üîí **Privacidade:** Este aplicativo exibe an√°lises de um conjunto de dados real e confidencial. "
    "Nenhum dado individual √© exposto. Todas as visualiza√ß√µes s√£o baseadas em dados pr√©-agregados "
    "para garantir o anonimato e a conformidade com a LGPD."
)

# --- APLICA√á√ÉO ---
if df_filtros is not None:
    # --- BARRA LATERAL (SIDEBAR) ---
    st.sidebar.header("Filtros da An√°lise")
    
    regiao = st.sidebar.multiselect(
        "Regi√£o",
        options=df_filtros['regiao'].unique(),
        default=df_filtros['regiao'].unique()
    )

    faixa_renda = st.sidebar.multiselect(
        "Faixa de Renda",
        options=df_filtros['faixa_renda'].unique(),
        default=df_filtros['faixa_renda'].unique()
    )

    # Filtrando o DataFrame principal de agregados
    df_filtrado_kpis = df_filtros[
        (df_filtros['regiao'].isin(regiao)) &
        (df_filtros['faixa_renda'].isin(faixa_renda))
    ]

    # --- ABAS COM AS AN√ÅLISES ---
    tab1, tab2, tab3 = st.tabs(["üìä Vis√£o Geral", "üåç An√°lise Geogr√°fica", "üìà An√°lise Temporal"])

    with tab1:
        st.header("Estat√≠sticas Descritivas da Sele√ß√£o")
        
        # Recalculando KPIs com base no grupo filtrado
        if not df_filtrado_kpis.empty:
            col1, col2, col3 = st.columns(3)
            col1.metric("Diversifica√ß√£o M√©dia", f"{df_filtrado_kpis['diversificacao_media'].mean():.2%}")
            col2.metric("Renda M√©dia", f"R$ {df_filtrado_kpis['renda_media'].mean():,.2f}")
            col3.metric("Propor√ß√£o com Ativos Complexos", f"{df_filtrado_kpis['proporcao_complex'].mean():.2%}")
        else:
            st.warning("Nenhum dado dispon√≠vel para a sele√ß√£o de filtros atual.")

        st.markdown("---")
        st.subheader("Distribui√ß√£o Geral da Diversifica√ß√£o na Amostra Completa")
        fig_dist = px.bar(df_dist, x='faixa_diversificacao', y='percentual', labels={'faixa_diversificacao': 'N√≠vel de Diversifica√ß√£o (0 a 1)', 'percentual': 'Percentual de Observa√ß√µes'})
        st.plotly_chart(fig_dist, use_container_width=True)

    with tab2:
        st.header("An√°lise da Diversifica√ß√£o pelo Brasil")
        st.info("O mapa abaixo n√£o √© afetado pelos filtros da barra lateral.")
        
        # (Nota: Este mapa requer um arquivo GeoJSON. O c√≥digo est√° aqui como um exemplo funcional que voc√™ pode adaptar)
        st.subheader("Diversifica√ß√£o M√©dia por Estado")
        st.markdown("Passe o mouse sobre um estado para ver os detalhes. Infelizmente, n√£o possuo o arquivo GeoJSON para renderizar o mapa neste momento, mas o c√≥digo est√° pronto.")
        # O c√≥digo abaixo funcionaria se voc√™ tivesse um arquivo 'brasil_estados.json'
        # import json
        # try:
        #     with open('brasil_estados.json') as f:
        #         geojson_brasil = json.load(f)
        #     fig_mapa = px.choropleth(
        #         df_mapa,
        #         geojson=geojson_brasil,
        #         locations='UF_CADASTRO',
        #         featureidkey="properties.sigla",
        #         color='diversificacao_media',
        #         color_continuous_scale="Viridis",
        #         scope="south america",
        #         hover_name='UF_CADASTRO',
        #         hover_data={'renda_media': ':.2f'}
        #     )
        #     fig_mapa.update_geos(fitbounds="locations", visible=False)
        #     st.plotly_chart(fig_mapa, use_container_width=True)
        # except FileNotFoundError:
        # st.error("Arquivo 'brasil_estados.json' n√£o encontrado. O mapa n√£o pode ser exibido.")

    with tab3:
        st.header("Evolu√ß√£o Temporal da Diversifica√ß√£o")
        df_temporal_filtrado = df_temporal[df_temporal['regiao'].isin(regiao)]
        
        fig_temporal = px.line(
            df_temporal_filtrado,
            x='anomes',
            y='diver',
            color='regiao',
            title='M√©dia de Diversifica√ß√£o por Regi√£o ao Longo do Tempo',
            labels={'anomes': 'Data', 'diver': 'Diversifica√ß√£o M√©dia', 'regiao': 'Regi√£o'}
        )
        st.plotly_chart(fig_temporal, use_container_width=True)